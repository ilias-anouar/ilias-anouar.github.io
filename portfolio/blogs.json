[
  {
    "id": "1",
    "title": "Mastering OOP P-1",
    "description": "Mastering Object-Oriented Programming & Thinking in Objects",
    "date": "10/12/2023",
    "cover": "oop1.png",
    "content": {
      "author": "Ilias anouar",
      "category": "Programming",
      "tags": ["Programming", "Classes", "Objects", "Javascript", "php"],
      "sections": {
        "p-1": "Object-oriented programming (OOP) is defined as a programming paradigm (and not a specific language) built on the concept of objects, i.e., a set of data contained in fields, and code, indicating procedures – instead of the usual logic-based system.",
        "p-2": "Object Oriented Programming (OOP) approach identifies classes of objects that are closely related to the methods with which they are associated. It also covers the concepts of attribute and method inheritance. The Massachusetts Institute of Technology was the first institution to utilize terminology referring to “objects” in the sense that we use object-oriented programming today, in the late 1950s and early 1960s.",
        "p-3": "It is a method for storing data and the operations required to process that data based on the mathematical field known as abstract data types. Programming could advance to a more abstract level thanks to OOP. Nearly all developers employ the core programming paradigm known as object-oriented programming at some point in their careers.",
        "p-4": "The well-known programming paradigm, OOP, is taught as the norm for most of a programmer’s educational career. OOP is based on the idea of classes and objects. It organizes a computer program into basic, reusable blueprints of code or “classes.” These classes are then used and reused to create new and unique objects with similar functions. This paradigm represents a system that interacts with actual items in real life – such as the user.",
        "p-5": "Different parts of it perform actions on real-world items, creating actual interactions between people and machines. The strategy is advantageous for collaborative development when projects are divided into groups due to the organization of object-oriented software. Code reuse, scalability, and efficiency are other advantages of OOP.",
        "p-6": "The first stage in OOP is to gather all the objects that a programmer wishes to work with and determine their relationships, a process known as data modeling. Data and functions are combined to create an object from the data structure. Programmers can also establish connections between several objects. Objects can, for instance, acquire traits from other objects. A human is a straightforward illustration of an object.",
        "p-7": "You would logically anticipate that a person would have a name. This would be regarded as being in the person’s possession. Another thing you could expect from someone is their ability to do, like walk or drive. One might view this as one of the person’s methods. Objects serve as the framework for object-oriented programming code.",
        "p-8": "Once your objects are in place, you may use their interactions to achieve the desired outcome. Consider the possibility of a show where someone gets in a car and drives it from point A to point B. Beginning with the objects like a person or a vehicle is how you would describe them.",
        "p-9": "The use of ways is one example of this: a person can drive a car, and a car can be driven. For the individual to drive, you must gather your items so that they are all in one place. When the object is identified, it is assigned a class of objects that describes the type of data it contains and sequences logic that could modify the data in any way. A method is any particular logic sequence. With clearly specified interfaces known as messages, objects may communicate."
      }
    }
  },
  {
    "id": "2",
    "title": "Mastering OOP P-2",
    "description": "Mastering Object-Oriented Programming & Thinking in Objects",
    "date": "10/12/2023",
    "cover": "oop2.png",
    "content": {
      "author": "Ilias anouar",
      "category": "Programming",
      "tags": ["Programming", "Classes", "Objects", "Javascript", "php"],
      "sections": {
        "p-1": "To understand and use object-oriented programming, it is necessary to know the following key concepts:",
        "p-2": "<span class=\"display-6\">1. Class</span><br>It is a user-defined data type that can be accessed and used by creating an instance of that class. It has its own data members and member functions. A class is comparable to an object’s blueprint. Both member functions and data members are found in classes. The data members inside the class are manipulated using these member functions.",
        "p-3": "<span class=\"display-6\">2. Object</span><br>At the point of creation of a class, the description is the first object to be defined. An instance of a class exists in an object. Notably, the system does not allocate any memory space when a class is specified, but it’s allocated when it is instantiated, i.e., when an object is formed. Real-world things have state and behavior in common, a pair of features. An object conceals its behavior through methods and keeps its information in attributes.",
        "p-4": "<span class=\"display-6\">3. Syntax</span><br>The principles that specify how a language is structured are known as syntax. In programming languages (rather than natural languages like English), syntax is the set of rules that define and guide how words, punctuation, and symbols are organized in a programming language. Without syntax, it is almost difficult to comprehend the semantics or meaning of a language. A compiler or interpreter won’t be able to understand the code if the syntax of a language is not adhered to.",
        "p-5": "<span class=\"display-6\">4. Encapsulation</span><br>Encapsulation is the process of grouping functions and data into a single entity. To access these data members, the member function’s scope must be set to “public,” while the data members’ scope must be set to “private.” According to this theory, an item contains all important information; only a small subset is made available to the outside world. Each object has a private class that contains its implementation and state.",
        "p-6": "<span class=\"display-6\">5. Polymorphism</span><br>Multiple classes can use the same method name using polymorphism, which also involves redefining methods for derived classes. Compile-time polymorphism and run-time polymorphism are the two different types of polymorphism. In addition to having several forms, objects are made to have shared behaviors. To avoid writing duplicate code, the software will determine which usage or meaning is required for each time an object from a parent class is used.",
        "p-7": "<span class=\"display-6\">6. Inheritance</span><br>In its broadest sense, inheritance refers to the process of gaining properties. One object in OOP inherits the properties of another. Developers can reuse common functionality while retaining a distinct hierarchy by assigning relationships and subclasses between items. This characteristic of OOP speeds up development and provides more accuracy by requiring a more in-depth investigation of the data. The parent-child relationship is symbolized via inheritance.",
        "p-8": "<span class=\"display-6\">7. Abstraction</span><br>One of the OOP concepts in Java is abstraction, which is the act of representing key features without including supporting information. It is a method for developing a brand-new data type appropriate for a particular application. It avoids providing extraneous or pointless facts and only displays the precise portion the user has requested. It is crucial since it prevents you from performing the same task more than once.",
        "p-9": "<span class=\"display-6\">8. Coupling</span><br>Coupling describes the degree to which one software element is connected to another. Software elements can be a class, package, component, subsystem, or system. It denotes the level of familiarity one object or class has with another. This means that if one class changes its attributes, the dependent changes in the other will also change. The magnitude of interdependence between the two classes will determine how these changes occur.",
        "p-10": "<span class=\"display-6\">9. Cohesion</span><br>A class’s cohesion is determined by how closely and meaningfully coupled to one another its methods and properties are, as well as by how intently they are focused on carrying out a single, clearly defined goal for the system. This is a measure of how narrowly focused a class’s responsibilities are. Because their methods and properties don’t relate to one another logically, low cohesive classes are challenging to maintain.",
        "p-11": "<span class=\"display-6\">10. Association</span><br>An association is a relationship between two distinct classes that are established with the aid of their objects. One-to-one, one-to-many, many-to-one, and many-to-many associations are all possible. An association is a connection between two things. The diversity between objects is defined by one of Java’s OOP concepts. There is no owner in this OOP concept, and each object has a distinct lifecycle.",
        "p-12": "<span class=\"display-6\">11. Aggregation</span><br>In this method, each object has a distinct lifecycle. Ownership, however, prevents the child object from being a part of another parent object. Java aggregation depicts the link between an object that contains other objects and is a weak association. This illustrates the connection between a component and a whole, where a part can exist without a whole. A unique type of semantically weak link called an aggregation occurs when unrelated things are combined.",
        "p-13": "<span class=\"display-6\">12. Composition</span><br>Composition is an association that depicts a relationship between a part and a whole in which a part cannot exist without a whole. Aggregation can take a variety of forms, including composition. Since child objects lack a lifecycle, they all automatically disappear when the parent object does. One object cannot exist without the other in any composition between two entities. As a result, both entities depend on one another in their composition.",
        "p-14": "<span class=\"display-6\">13. Modularity</span><br>Modular design refers to the division of a system into many functional pieces (referred to as modules) that can be combined to create a more extensive application. Modularity and encapsulation are inextricably related. When mapping encapsulated abstractions into actual, physical modules, high cohesion within the modules and limited inter-module interaction or coupling can be seen as the definition of modularity.",
        "p-15": "<span class=\"display-6\">14. Constructors and methods</span><br>A constructor is a specific kind of subroutine called to create an object. It sets up the new object for use and frequently accepts arguments from the constructor to set up necessary member variables. In OOP, a method is a procedure connected to a message and an object. An object’s state data and behavior make up its interface, which describes how any of its numerous consumers may use it. A method is a consumer-parameterized object activity."
      }
    }
  },
  {
    "id": "3",
    "title": "Advantages of OOP",
    "description": "Mastering Object-Oriented Programming & Thinking in Objects",
    "date": "10/12/2023",
    "cover": "A-OOP.png",
    "content": {
      "author": "Ilias anouar",
      "category": "Programming",
      "tags": ["Programming", "Classes", "Objects", "Javascript", "php"],
      "sections": {
        "p-1": "Despite the rise of various programming models, OOP remains popular in DevOps. This is due to the following advantages it provides:",
        "p-2": "<span class=\"display-6\">1. Enables code reusability</span><br>The idea of inheritance is one of the critical concepts offered by object-oriented programming. A class’s attributes can be passed down through inheritance, eliminating the need for duplication of effort. Doing this prevents the problems associated with repeatedly writing the same code.<br>Thanks to introducing the idea of classes, the code section can be used as many times as necessary in the program. A child class that uses the inheritance method inherits the parent class’s fields and methods. One can readily alter the parent class’s available methods and values.",
        "p-3": "<span class=\"display-6\">2. Increases productivity in software development</span><br>We can create programs from pre-written, interconnected modules rather than having to start from scratch, which would save time and increase productivity. Thanks to the OOP language, we can break the software into manageable, discrete problems. Because it allows for the division of labor in the creation of object-based programs, object-oriented programming is modular.<br>It is also extendable, as you may add new characteristics and actions to objects. One can utilize objects in several applications. Object-oriented programming increases software development productivity, compared to conventional procedure-based programming techniques, due to modularity, extensibility, and reusability.",
        "p-4": "<span class=\"display-6\">3. Makes troubleshooting simpler</span><br>When object-oriented programming is used, troubleshooting is made simpler since the user knows where to look in the code to find the source of the problem. Since the error will indicate where the issue is, there is no need to inspect additional code areas. All objects in object-oriented programming (OOP) are self-constrained, which is one benefit of employing encapsulation. DevOps engineers and developers gain a lot of advantages from this multimodal behavior because they may now work on several projects at once with the benefit of avoiding code duplication.",
        "p-5": "<span class=\"display-6\">4. Reinforces security</span><br>To maintain application security and provide vital data for viewing, we are filtering out limited data through data hiding and abstraction mechanisms. The concept of data abstraction in OOPS allows only a small amount of data to be displayed to the user, which is one of OOP’s strong points.<br>When only the necessary info is accessible, the rest is not. As a result, it makes security maintenance possible. Another set of OOP’s advantages in Java’s idea of abstraction is used to conceal complexity from other users and display the element’s information per the requirements.",
        "p-6": "<span class=\"display-6\">5. Simplifies code maintenance</span><br>Object-oriented software is simpler to maintain in terms of code. Because of the design’s modularity, one can upgrade a portion of the system in the event of problems without calling for significant adjustments. Additionally, you can modify already-existing objects to create new ones.<br>Any programming language would benefit from having this capability; it prevents users from having to redo work in a variety of ways. Maintaining and updating the current codes by adding new changes is always simple and time-saving. Since one can produce new objects with just minor variations from old ones, it is simple to maintain and modify current code.",
        "p-7": "<span class=\"display-6\">6. Prevents the repetition of data</span><br>Redundant data refers to data that has been duplicated. As a result, the same information is repeated. The redundancy of the data is seen as a benefit in object-oriented programming. For instance, the user would like the capability comparable to that of practically all classes.<br>In such circumstances, the user can construct classes with comparable functionality and inherit them when necessary. A significant benefit of OOP is the redundancy of data. Users who want a comparable feature in numerous classes can write standard class definitions for those features and inherit them.",
        "p-8": "<span class=\"display-6\">7. Results in flexible code</span><br>Polymorphism is the idea that allows for flexibility. The following advantages of polymorphism for developers are extensibility and simplicity. One advantage of OOP is polymorphism, which allows a piece of code to exist in more than one version. For instance, you might act differently if the setting or environment changes.<br>Let us look at a simple example. In a market, a person will act like a customer; in a school, a person will act like a student; and in a home, a person will act like a son or daughter. Here, the same person exhibits various behaviors depending on the environment.",
        "p-9": "<span class=\"display-6\">8. Addresses issues early on</span><br>Another benefit of object-oriented programming is that it may effectively solve problems by being divided into smaller components. It becomes good programming practice to deconstruct a complex issue into simpler parts or components. Given this information, OOPS uses a feature that divides the program code into smaller, more manageable chunks developed one at a time.<br>Once the issue has been disassembled, you can put the individual pieces to use again to address additional problems. Additionally, *one might use the modules with the same interface and implementation details to replace the more minor codes.",
        "p-10": "<span class=\"display-6\">9. Provides design advantages</span><br>A significant development in software engineering has been object-oriented development. Among other things, it promises to shorten development duration and give firms a competitive advantage. The design benefit that users will experience from OOPs is the ease with which they can design and fix things and the reduction of hazards, if any.<br>Here, object-oriented programs require a lengthy and thorough design phase from the designers, which produces better designs with fewer faults. It is simpler to program all the non-OOPs independently after a certain point when the program has hit some fundamental constraints.",
        "p-11": "<span class=\"display-6\">10. Lowers development costs</span><br>Using an object-oriented approach does make it possible to cut back on some of the direct costs involved with systems, including maintenance and development. Reusing software also reduces the price of development. In most cases, more time and effort are spent on object-oriented analysis and design, reducing the overall development cost.<br>The general cost of the improvement is reduced since more effort is typically put into the article-specific assessment and plan. The development cost is generally reduced since more time and effort are usually spent on object-oriented analysis and design."
      }
    }
  },
  {
    "id": "4",
    "title": "API security",
    "description": "Enhance the security of your API and improve performance.",
    "date": "10/12/2023",
    "cover": "API.png",
    "content": {
      "author": "Ilias anouar",
      "category": "Back-end development",
      "tags": ["API", "Security", "nodejs", "Express.js"],
      "sections": {
        "p-1": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Porro repellat voluptates laudantium corporis eos! Blanditiis eveniet porro exercitationem, molestiae animi fugit perspiciatis, id, non ipsum rem cupiditate ut sapiente repudiandae?",
        "p-2": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Porro repellat voluptates laudantium corporis eos! Blanditiis eveniet porro exercitationem, molestiae animi fugit perspiciatis, id, non ipsum rem cupiditate ut sapiente repudiandae?",
        "p-3": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Porro repellat voluptates laudantium corporis eos! Blanditiis eveniet porro exercitationem, molestiae animi fugit perspiciatis, id, non ipsum rem cupiditate ut sapiente repudiandae?"
      }
    }
  },
  {
    "id": "5",
    "title": "Gmail API",
    "description": "Integration gmail api in a nodejs application.",
    "date": "10/12/2023",
    "cover": "gmailAPI.png",
    "content": {
      "author": "Ilias anouar",
      "category": "Back-end development",
      "tags": ["API", "nodejs", "Javascript", "Express.js", "NodeMailer"],
      "sections": {
        "p-1": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Porro repellat voluptates laudantium corporis eos! Blanditiis eveniet porro exercitationem, molestiae animi fugit perspiciatis, id, non ipsum rem cupiditate ut sapiente repudiandae?",
        "p-2": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Porro repellat voluptates laudantium corporis eos! Blanditiis eveniet porro exercitationem, molestiae animi fugit perspiciatis, id, non ipsum rem cupiditate ut sapiente repudiandae?",
        "p-3": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Porro repellat voluptates laudantium corporis eos! Blanditiis eveniet porro exercitationem, molestiae animi fugit perspiciatis, id, non ipsum rem cupiditate ut sapiente repudiandae?"
      }
    }
  },
  {
    "id": "6",
    "title": "Initiation in PY",
    "description": "Initiation in python language and python programming",
    "date": "10/12/2023",
    "cover": "python.png",
    "content": {
      "author": "Ilias anouar",
      "category": "Programming",
      "tags": ["Programming", "python", "development"],
      "sections": {
        "p-1": "<span class=\"display-6\">Introduction</span><br>With the rising threat of cyberattacks, securing APIs has become business-critical. Especially as many security reports indicate that web APIs are quite vulnerable. Thankfully, by following a few best practices, API providers can ward off many potential vulnerabilities. Below, we cover top API security best practices, which are good things to keep in mind when designing and creating APIs.",
        "p-2": "<span class=\"display-6\">1. Always Use a Gateway</span><br>Our first recommendation is to always put your API behind a gateway. API gateways centralize traffic features and apply them to every request that hits your API. These features may be security-related, like rate limiting, blocking malicious clients, and proper logging. Or, they may be more practical and business-related, like path and headers rewriting, gathering business metrics, and so on.<br><br>Not having these controls could easily result in a serious security threat. Without a gateway, API providers would have to reinforce each endpoint with these features one-by-one. An API gateway eases the process of adding or fixing these features. Thankfully, there are plenty of API gateway products available on the market.",
        "p-3": "<span class=\"display-6\">2. Always Use a Central OAuth Server</span><br>Next, do not let your APIs or gateways issue access or refresh tokens. A centralized OAuth server should always issue such tokens. Issuing tokens requires many complex processes: authenticating the client, authenticating the user, authorizing the client, signing the tokens, and other operations. All these functions require access to different data, such as client information or the preferred authentication mechanism. Furthermore, if many entities issue and sign tokens, it becomes increasingly challenging to manage all the credentials used for signing. Only one entity can safely handle these processes — an OAuth server.",
        "p-4": "<span class=\"display-6\">3. Only Use JSON Web Tokens Internally</span><br>When APIs are concerned, using JSON Web Tokens (JWTs) as access and refresh tokens is a good practice. Services that receive JWTs can leverage claim information to make informed business decisions: Is the caller allowed to access this resource? What data can the caller retrieve?<br><br>However, when tokens are exposed outside your infrastructure and especially when exposed to third-party clients, you should use opaque tokens instead of JWTs. Information in a JWT is easy to decode and thus available to everyone. If JWT data is public, privacy becomes a concern. You must ensure that no sensitive data ends up in the JWT's claims. What is more, if you share JWTs with third-party clients, chances are that they will start depending on the data in the JWT. It might become a liability, even if the data is not sensitive. Once integrators start depending on the contents of a JWT, changing the token's claims could result in a breaking change, requiring costly implementation upgrades in all third-party clients.<br><br>If you want to use opaque tokens externally but also benefit from JWTs in your internal communication, you can use one of two approaches:<a href=\"https://curity.io/resources/learn/phantom-token-pattern/\">the phantom token approach</a> or the <a href=\"https://curity.io/resources/learn/split-token-pattern/\">split token approach</a>. Both involve an API gateway in the process of translating an opaque token into a JWT.",
        "p-5": "<span class=\"display-6\">4. Use Scopes for Coarse-Grained Access Control</span><br>OAuth scopes limit the capabilities of an access token. If stolen client credentials have limited scopes, an attacker will have much less power. Therefore, you should always issue tokens with limited capabilities. Verification of token scopes can be done at the API gateway to limit the malicious traffic reaching your API. You should use scopes during coarse-grained access control. This control could include checking whether a request with a given access token can query a given resource or verifying the client can use a given Content-Type.",
        "p-6": "<span class=\"display-6\">5. Use Claims for Fine-Grained Access Control at the API Level</span><br>You should always implement fine-grained access control at the API level. This access control complements any control done at the API gateway level, and should be architected so that even if a malicious request slips through the gateway, the API will still reject it. This practice safeguards against situations in which attackers bypass the gateway.<br><br>A fine-grained access control focuses on securing an API from a business perspective. The API should verify whether the request can reach the given endpoint. It should also check whether the caller has rights to the data and what information can be returned based on the caller's identity (both for the client and user). The 2013 OWASP <a href=\"https://owasp.org/www-project-api-security/\">Top 10 API Security Vulnerabilities</a> lists broken object level authorization as the top API vulnerability, so it's worth remembering this one.",
        "p-7": "<span class=\"display-6\">6. Trust No One</span><br><a href=\"https://curity.io/resources/learn/zero-trust-overview/\">Zero-trust</a>is not just a buzzword — your API should limit trust to incoming traffic. Period. One of the steps toward building zero-trust is using HTTPS for all API traffic. If possible, use HTTPS internally so that traffic between services cannot be sniffed.<br><br>Your services should always verify incoming JWTs, even if they are transformed from an opaque token by the gateway. This again helps to mitigate situations where a request manages to bypass your gateway, preventing a malicious actor from operating inside your company or infrastructure.<br><br>Zero-trust also means that your services should deny access by default. Then use claims-based access control to allow access to requests that fulfill concrete access control policies.",
        "p-8": "<span class=\"display-6\">7. Do Not Mix Authentication Methods</span><br>Do not mix authentication methods for the same resources. Authentication methods can have different security levels. For example, consider Basic authentication versus multi-factor authentication. If you have a resource secured with a higher level of trust, like a JWT with limited scopes, but allow access with a lower level of trust, this can lead to API abuse. In some cases, this could be a significant security risk.",
        "p-9": "<span class=\"display-6\">8. Protect All APIs</span><br>Do not leave any of your APIs unprotected. Even internal APIs should have protections implemented. This way, you're sure that the API is protected from any threat from inside your organization.<br><br>APIs are commonly created for internal use only and made available to the public later on. In such scenarios, proper API security tends to be overlooked. When published externally, the API becomes vulnerable to attacks.<br><br>Remember that security by obscurity is not recommended. Just because you create a complicated name for an endpoint or use an obscure Content-Type does not mean the API will be secure. It's only a matter of time before someone finds the endpoint and abuses it.",
        "p-10": "<span class=\"display-6\">9. Issue JWTs for Internal Clients Inside Your Network</span><br>If you have internal clients operating only inside your network, you can have your OAuth server issue JWTs for such clients instead of opaque tokens. This will avoid unnecessary token translations. However, you should only apply this strategy if the JWTs do not leave your network. If you have external clients, or if the tokens are used externally, you should hide them behind an opaque token, as noted before.",
        "p-11": "<span class=\"display-6\">10. Always Audit</span><br>Maintaining high standards for your APIs, both from a security and design point of view, is not a trivial task. Therefore, consider splitting responsibility between different groups of people and having other teams audit your APIs.<br><br>There are different approaches to setting up governance over your API. You could have a dedicated team of API experts review the design and security aspects, or create a guild of API experts picked from different groups to offer guidance. However you organize governance, ensure you always have additional eyes checking your APIs.",
        "p-12": "<span class=\"display-6\">Conclusion</span><br>Securing an API with high-standard security is a paramount concern. As seen above, there are many technical strategies to consider when designing your authorization processes, which, if undermined, can directly affect API security. A stronger foundation is only made possible with a secure, centralized OAuth server responsible for token issuance and claims assertion. Many suggestions also revolve around treating internal APIs with the same care as public-facing endpoints. By following these protective measures, you can sufficiently safeguard APIs and thwart unwanted behavior."
      }
    }
  }
]
